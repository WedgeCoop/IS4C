<?php
/*******************************************************************************

    Copyright 2009 Whole Foods Co-op

    This file is part of Fannie.

    Fannie is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Fannie is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    in the file license.txt along with IS4C; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*********************************************************************************/

/**************************************************
CLASS INTERFACE

Properties:
TYPE_MYSQL - type for MySQL (static)
TYPE_MSSQL - type for Microsoft SQL Server (static)

Methods:
SQLManager(server, type, database, username, password[default: ''], persistent[default: False])
	Constructor. Creates the object and adds an initial connection to use as the
	default. Future references to this connection can be made using the $database string.
	Type should be one of the static database types, e.g. TYPE_MYSQL

add_connection(server, type, database, username, password[d: ''], persistent[d: False])
	Same as above, but this is not the default connection.

select_db(database_name, connection_identifier)
	Selects the given database, using the default connection if no identifier is provided.

query(query_string, connection_identifier)
	Issues the query and returns the result, using the default connection is no identifier 
	is provided.

fetch_array(result_object, connection_identifer)
	Returns the row array, using the default connection if no identifier is provided.

**************************************************/
$TYPE_MYSQL = 'MYSQL';
$TYPE_MSSQL = 'MSSQL'; 
$TYPE_PGSQL = 'PGSQL';
$QUERY_LOG = "/tmp/queries.log";

class SQLManager {

	var $connections;
	var $db_types;
	var $default_db;

	var $TYPE_MYSQL = 'MYSQL';
	var $TYPE_MSSQL = 'MSSQL'; 
	var $TYPE_PGSQL = 'PGSQL';

	function SQLManager($server,$type,$database,$username,$password='',$persistent=False){
		$type = strtoupper($type);
		$this->connections=array();
		$this->db_types=array();
		$this->default_db = $database;
		$this->add_connection($server,$type,$database,$username,$password,$persistent,$database);
	}

	function add_connection($server,$type,$database,$username,$password='',$persistent=False){
		if (isset($this->connections[$database])){
			$this->connections[$database] = $this->connect($server,
				strtoupper($type),$username,$password,
				$persistent,False);		
		}
		else {
			$this->connections[$database] = $this->connect($server,
				strtoupper($type),$username,$password,
				$persistent,True);		

		}
		if (!$this->connections[$database]) return False;
		$this->db_types[$database] = $type;
		$gotdb = $this->select_db($database,$database);
		if (!$gotdb){
			if ($this->query("CREATE DATABASE $database")){
				$this->select_db($database,$database);
			}
			else {
				unset($this->db_types[$database]);
				$this->connections[$database] = False;
			}
		}
		return True;
	}

	function connect($server,$type,$username,$password,$persistent=False,$newlink=False){
		switch($type){
		case $this->TYPE_MYSQL:
			if(!function_exists('mysql_connect')) return False;
			if ($persistent)
				return mysql_pconnect($server,$username,$password,$newlink);
			else
				return mysql_connect($server,$username,$password,$newlink);
		case $this->TYPE_MSSQL:
			if(!function_exists('mssql_connect')) return False;
			if ($persistent)
				return mssql_pconnect($server,$username,$password,$newlink);
			else
				return mssql_connect($server,$username,$password,$newlink);
		case $this->TYPE_PGSQL:
			$conStr = "host=".$server." user=".$username." password=".$password;
			if(!function_exists('pg_connect')) return False;
			if ($persistent)
				return pg_pconnect($conStr);
			else
				return pg_connect($conStr);
		}	
		return -1;
	}

	function select_db($db_name,$which_connection=''){
		if ($which_connection == '')
			$which_connection=$this->default_db;
		switch($this->db_types[$which_connection]){	
		case $this->TYPE_MYSQL:
			return mysql_select_db($db_name,$this->connections[$which_connection]);	
		case $this->TYPE_MSSQL:
			return mssql_select_db($db_name,$this->connections[$which_connection]);
		case $this->TYPE_PGSQL:
			return True;
		}
		return -1;
	}

	function close($which_connection=''){
		if ($which_connection == '')
			$which_connection=$this->default_db;
		$con = $this->connections[$which_connection];
		$type = $this->db_types[$which_connection];
		unset($this->connections[$which_connection]);
		unset($this->db_types[$which_connection]);
		switch($type){
		case $this->TYPE_MYSQL:
			return mysql_close($con);
		case $this->TYPE_MSSQL:
			return mssql_close($con);
		case $this->TYPE_PGSQL:
			return pg_close($con);
		}
		return -1;
	}

	function query($query_text,$which_connection=''){
		global $QUERY_LOG;
		if ($which_connection == '')
			$which_connection=$this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			$ret = mysql_query($query_text,$this->connections[$which_connection]);
			if (!$ret && !empty($QUERY_LOG)){
				$fp = fopen($QUERY_LOG,"a");
				fputs($fp,$query_text."\n");
				fclose($fp);
			}
			return $ret;
		case $this->TYPE_MSSQL:
			$ret = mssql_query($query_text,$this->connections[$which_connection]);
			if (!$ret && !empty($QUERY_LOG)){
				$fp = fopen($QUERY_LOG,"a");
				fputs($fp,$query_text."\n");
				fclose($fp);
			}
			return $ret;
		case $this->TYPE_PGSQL:
			return pg_query($this->connections[$which_connection],$query_text);
		}	
		return -1;
	}

	function escape($query_text,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			if (function_exists("mysql_real_escape_string"))
				return mysql_real_escape_string($query_text,
					$this->connections[$which_connection]);
			else
				return mysql_escape_string($query_text);
		case $this->TYPE_MSSQL:
			return str_replace("'","''",$query_text);
		case $this->TYPE_PGSQL:
			return pg_escape_string($query_text);
		}
	}
	
	function num_rows($result_object,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return mysql_num_rows($result_object);
		case $this->TYPE_MSSQL:
			return mssql_num_rows($result_object);
		case $this->TYPE_PGSQL:
			return pg_num_rows($result_object);
		}
		return -1;
	}
	
	function num_fields($result_object,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return mysql_num_fields($result_object);
		case $this->TYPE_MSSQL:
			return mssql_num_fields($result_object);
		case $this->TYPE_PGSQL:
			return pg_num_fields($result_object);
		}
		return -1;
	}

	function fetch_array($result_object,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return mysql_fetch_array($result_object);
		case $this->TYPE_MSSQL:
			return mssql_fetch_array($result_object);
		case $this->TYPE_PGSQL:
			return pg_fetch_array($result_object);
		}
		return False;
	}
	
	/* compatibility */
	function fetch_row($result_object,$which_connection=''){
		return $this->fetch_array($result_object,$which_connection);
	}

	function now($which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return "now()";
		case $this->TYPE_MSSQL:
			return "getdate()";
		case $this->TYPE_PGSQL:
			return "now()";
		}
	}

	function datediff($date1,$date2,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return "datediff($date1,$date2)";
		case $this->TYPE_MSSQL:
			return "datediff(dd,$date2,$date1)";
		}
	}

	function monthdiff($date1,$date2,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return "period_diff(date_format($date1, '%Y%m'), date_format($date2, '%Y%m'))";
		case $this->TYPE_MSSQL:
			return "datediff(mm,$date2,$date1)";
		}	
	}

	function weekdiff($date1,$date2,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return "week($date1) - week($date2)";
		case $this->TYPE_MSSQL:
			return "datediff(wk,$date2,$date1)";
		}	
	}

	function fetch_object($result_object,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return mysql_fetch_object($result_object);
		case $this->TYPE_MSSQL:
			return mssql_fetch_object($result_object);
		case $this->TYPE_PGSQL:
			return pg_fetch_object($result_object);
		}
		return False;
	}

	function fetch_field($result_object,$index,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return mysql_fetch_field($result_object,$index);
		case $this->TYPE_MSSQL:
			return mssql_fetch_field($result_object,$index);
		}
		return -1;
	}

	/* copy a table from one database to another, not necessarily on
	   the same server or format
	
	   $source_db is the database name of the source
	   $select_query is the query that will get the data
	   $dest_db is the database name of the destination
	   $insert_query is the beginning of the query that will add the
		data to the destination (specify everything up to VALUES)
	*/
	function transfer($source_db,$select_query,$dest_db,$insert_query){
		$result = $this->query($select_query,$source_db);
		if (!$result) return False;

		$num_fields = $this->num_fields($result,$source_db);

		$unquoted = array("money"=>1,"real"=>1,"numeric"=>1,
			"float4"=>1,"float8"=>1,"bit"=>1);
		$strings = array("varchar"=>1,"nvarchar"=>1,"string"=>1,
			"char"=>1);
		$dates = array("datetime"=>1);
		$queries = array();

		while($row = $this->fetch_array($result,$source_db)){
			$full_query = $insert_query." VALUES (";
			for ($i=0; $i<$num_fields; $i++){
				$type = $this->field_type($result,$i,$source_db);
				if ($row[$i] == "" && strstr(strtoupper($type),"INT"))
					$row[$i] = 0;	
				elseif ($row[$i] == "" && isset($unquoted[$type]))
					$row[$i] = 0;
				if (isset($dates[$type]))
					$row[$i] = $this->cleanDateTime($row[$i]);
				elseif (isset($strings[$type]))
					$row[$i] = str_replace("'","''",$row[$i]);
				if (isset($unquoted[$type]))
					$full_query .= $row[$i].",";
				else
					$full_query .= "'".$row[$i]."',";
			}
			$full_query = substr($full_query,0,strlen($full_query)-1).")";
			array_push($queries,$full_query);
		}

		$ret = True;
		foreach ($queries as $q){
			if(!$this->query($q,$dest_db)) $ret = False;
		}

		return $ret;
	}

	function field_type($result_object,$index,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return mysql_field_type($result_object,$index);
		case $this->TYPE_MSSQL:
			return mssql_field_type($result_object,$index);
		case $this->TYPE_PGSQL:
			return pg_field_type($result_object,$index);
		}
		return -1;
	}

	function field_name($result_object,$index,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return mysql_field_name($result_object,$index);
		case $this->TYPE_MSSQL:
			return mssql_field_name($result_object,$index);
		case $this->TYPE_PGSQL:
			return pg_field_name($result_object,$index);
		}
		return -1;
	}

	function dayofweek($field,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return "dayofweek($field)";
		case $this->TYPE_MSSQL:
			return "datepart(dw,$field)";
		case $this->TYPE_PGSQL:
			return '';
		}
		return -1;
	}

	function hour($field,$which_connection=''){
		if ($which_connection == '')
			$which_connection = $this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			return "hour($field)";
		case $this->TYPE_MSSQL:
			return "datepart(hh,$field)";
		case $this->TYPE_PGSQL:
			return '';
		}
		return -1;
	}


	function cleanDateTime($str){
		$stdFmt = "/(\d\d\d\d)-(\d\d)-(\d\d) (\d+?):(\d\d):(\d\d)/";
		if (preg_match($stdFmt,$str,$group))
			return $str;	

		$msqlFmt = "/(\w\w\w) (\d\d) (\d\d\d\d) (\d+?):(\d\d)(\w)M/";

		$months = array(
			"jan"=>"01",
			"feb"=>"02",
			"mar"=>"03",
			"apr"=>"04",
			"may"=>"05",
			"jun"=>"06",
			"jul"=>"07",
			"aug"=>"08",
			"sep"=>"09",
			"oct"=>"10",
			"nov"=>"11",
			"dec"=>"12"
		);

		$info = array(
			"month" => 1,
			"day" => 1,
			"year" => 1900,
			"hour" => 0,
			"min" => 0
		);
		
		if (preg_match($msqlFmt,$str,$group)){
			$info["month"] = $months[strtolower($group[1])];
			$info["day"] = $group[2];
			$info["year"] = $group[3];
			$info["hour"] = $group[4];
			$info["min"] = $group[5];
			if ($group[6] == "P")
				$info["hour"] = ($info["hour"] + 12) % 24;
		}

		$ret = $info["year"]."-";
		$ret .= str_pad($info["month"],2,"0",STR_PAD_LEFT)."-";
		$ret .= str_pad($info["day"],2,"0",STR_PAD_LEFT)." ";
		$ret .= str_pad($info["hour"],2,"0",STR_PAD_LEFT).":";
		$ret .= str_pad($info["min"],2,"0",STR_PAD_LEFT);
		return $ret;
	}

	/* check whether the given table exists
	   Return values:
		True => table exists
		False => table doesn't exist
		-1 => Operation not supported for this database type
	*/
	function table_exists($table_name,$which_connection=''){
		if ($which_connection == '')
			$which_connection=$this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			$result = $this->query("SHOW TABLES FROM $which_connection LIKE '$table_name'",$which_connection);
			if ($this->num_rows($result) > 0) return True;
			else return False;	
		case $this->TYPE_MSSQL:
			$result = $this->query("SELECT name FROM sysobjects WHERE name LIKE '$table_name'",$which_connection);
			if ($this->num_rows($result) > 0) return True;
			else return False;	
		}
		return -1;
	}

	/* return the table's definition
	   Return values:
		array of (column name, column type) => table found
		False => no such table
		-1 => Operation not supported for this database type
	*/
	function table_definition($table_name,$which_connection=''){
		if ($which_connection == '')
			$which_connection=$this->default_db;
		switch($this->db_types[$which_connection]){
		case $this->TYPE_MYSQL:
			$return = array();
			$result = $this->query("SHOW COLUMNS FROM $table_name",$which_connection);
			while($row = $this->fetch_row($result))
				array_push($return,array($row[0],$row[1]));
			if (count($return) == 0) return False;
			else return $return;
		case $this->TYPE_MSSQL:
			$return = array();
			$result = $this->query("SELECT c.name,t.name,c.length
						FROM syscolumns AS c
						LEFT JOIN sysobjects AS o
						ON c.id=o.id
						LEFT JOIN systypes AS t
						ON c.xtype=t.xtype
						WHERE o.name='$table_name'",$which_connection);
			while($row = $this->fetch_row($result))
				array_push($return,array($row[0],$row[1]."(".$row[2].")"));
			if (count($return) == 0) return False;
			else return $return;
		}
		return -1;
	}
}

?>
