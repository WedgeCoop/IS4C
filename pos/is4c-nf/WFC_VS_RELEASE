====================================================
= DIFFERENCES BETWEEN MY SCRIPTS AND THE RELEASE
= VERSION SCRIPTS, DISCUSSED PER FILE
====================================================

authenticate3.php: WFC version requires frontendsecurity >= 21
	to unlock someone else's screen. Trunk requires >= 11

chgName.php: File doesn't exist in WFC version. Function is in
	lib/printLib.php. WFC version doesn't handle different
	account # lengths differently

chkscale.php: not in use. Can replace scale.php in gui-base.php's
	drawGui()

chkscanner.php: not in use. Can be added to gui-base.php's drawGui()

clearscanner.php: not in use, as with chkscanner.php

clientscripts.php: most of these functions are no longer used
	in my code, either incorporated directly in if they're
	only called once or replaced by gui-base.php's javascript
	generating php functions.

clubCard.php: moved to parser-class-lib/ClubCard.php

connect.php: several changes here, in lib/connect.php
	1) uses my SQLManager class rather than the SQL abstraction
	   functions
	2) uses persistent connections for local [lane] DBs
	3) amtdue in getsubtotals() is calculated using a float cast
	   since string numbers > $999 cause weird results
	4) uploadToServer() uses SQLManager's transfer method to
	   move tables from one DB to another. In theory this works
	   even when lane and sever have different DBMS's (tested with
	   MSSQL lane & Postgres server).
	5) uploadToServer() also uploads to a table called dTransToday.
	   WFC truncates this table every night rather than archiving
	   and truncating dTransactions.

decision.php: endorseType() (from clientscripts.php) is incorporated
	directly into the code. Javascript for populating & submitting
	the form is slightly different. I changed it when running into
	some error, but I forget what. It should be functionally identical.
	There are a couple extra warning session variables that I use
	in conjunction with boxMsg2.php to throw in "Enter to continue,
	clear to cancel" cashier prompts. Enter credit card or check
	tender w/o an amount provides a good example of this.

display.php: not used. All drawing of the main frame set is done by
	drawGui() in gui-base.php

end.php: the auotReprint session variable gets checked (setting it
	causes a second receipt to be printed automatically).
	moveTempData() also offloads data to a lane table localTrans_today.
	This is truncated nightly and used in place of localTrans in a
	couple spots for speed.

ini.php: I'm adding $_SESSION variables to deal with place where table
	names differ among versions and/or DBMSes

	$_SESSION["local_dtrans"] is the local table in translog that
	corresponds in format to the dtransactions table on the server
	(WFC dtransations doesn't have MemberType or Staff on the server
	side, so I use a view locally to trim those columns out)

invalid.php et al: none of the "invalid" pages exist anymore. The gui 
	class InvalidPage allows a two different bodies to be loaded
	based on $_GET["invalid"], so the old invalid pages that only
	differ in color & message text are not needed.

lib.php: in lib/lib.php. I removed nullwrap_old and truthwrap functions
	as they are not used anywhere. 

loadconfig.php: in lib/loadconfig.php. I removed the nexttransno function
	as it is not used.

loan*.php: these seem to rely on a loanenter() display function that does
	not exist, so I skipped implementing them.

login.php: just a redirect so all drawing takes place in the same frameset
	from gui-base.php's drawGui().

maindisplay.php: gone. All javascript jumping around is with the
	main frameset in gui-base.php.

mcoupon.php: gone. Function moved to parser-class-lib/UPC.php

MemCommentPlus.php: relies on non-existant memDataConnect(), thus skipped.

memlist.php: moved to gui-modules/memlist.php. We had an issue with 
	cashiers using the "Clear" button to try and dimiss both memlist.php
	and memsearch.php. I've modified memlist.php's javascript so
	hitting "CL<enter>" will dimiss the list without selecting a member.
	Input filtering also triggers on "CL" (from memsearch.php), which
	is kind of a kludge. You can't search by just "CL" anymore, but
	our "Clancy" membership doesn't end up with so much weird and
	incorrect activity.

msgscreen.php: again eliminated, everything runs through the same frameset
	in gui-base.php

pos.php: this only exists to call drawGui(). I had to add it because
	once in a great while - I never found any rhyme or reason to it -
	redirecting two pages in the frameset (input and main_frame) at the
	same time caused IE to lock up completely. I just gave up and
	redirected the top level location to pos.php after setting
	$_SESSION variables to get the proper input & main_frame.

pos2.php: this is the doozy, and has its own section below

prehkeys.php: this is going to be one of the bigger ones to merge.
	I haven't checked it line for line yet, but I'll jot down differences
	that stand out:
	tender():
		I do some type casting at the beginning to change
		the amount from a string to a numeric type. PHP does
		not interpret strings over $999 (i.e., 100000 and up)
		correctly. I also add support for traveler's checks (TV)
		They get endorsed like checks and added AS checks. Thus
		they show up as checks on the server side (per our 
		financial dept's request) but aren't restricted by the
		cash over limit at the lanes.
	deptkey(): has a couple hard-coded bits for cashier prompts
		and automatic second receipts.
	I removed MADDiscount() and needBasedDisc(); neither is used.

printLib.php: in lib/printLib.php. Modified printReceiptHeader() to
	allow for an arbitrary number of header lines.

printReceipt.php: in lib/printReceipt.php. Mine uses setDrawKickLater()
	instead of setDrawKick() to open in a more limited number of
	circumstances. The rest of the function is pretty significantly
	different. We still use an "old" style receipt and the new/old
	split is reflected heavily. I'll move mine up to your receipt
	when time allows, but I want to merge more important code first.

reprint.php: again, my receipt style differs but this isn't a high priority.

resume.php: we've both changed the original structure of this; I *think*
	they're functionally equivilent. Mine uses SQLManager's transfer
	method to move data between servers for [theoretical] DMBS
	independence.

scale.php: mine is slightly different. A $_SESSION variable short circuits
	the page to hide the scale (since I'm always using the same
	frameset, scale.php is always there but it shouldn't always
	be showing scale input).

setDrawerKick.php: my setDrawerKickLater() opens for non-zero cash tenders
	and credit card tenders.

special.php: in lib/special.php. Again mine is geared towards DMBS
	independence. The mysql query is currently hardcoded in.

suspendedlist.php: same deal as special.php (except it's in gui-modules)

tenderReport.php: in lib/tenderReport.php. Mine is a re-write as a loop
	to avoid a lot of repetitiveness and extended to different
	tenders easily.

upcscanned.php: in parser-class-lib/UPC.php. A fair amount of
	difference here. Basic functionality should be the same, but
	compatibility may need fine-tuning after some testing.

====================================================
= MY POS2.PHP
====================================================
At a glance, this bears little resemblance to the release
version. Input parsing takes place in three steps.

STEP ONE: The first parse chain
	An array of parser objects is built, then the
	input string is handed to each object in the array
	Objects in the first parse chain MAY modify the
	input string.

STEP TWO: Quantity
	After the first parse chain finshes modifying the
	input string, the quantity operator (*) is handled.
	This is the end of what I think of as "pre-parsing",
	where the input string is modified and $_SESSION variables
	are set in preparation for "actual parsing"

STEP THREE: The second parse chain
	Again there's an array of parser objects and the input
	string is handed to each one in turn. This time the
	objects must finish handling the input. Once in object
	returns true from its check() method - asserting that it
	can handle this input - the loop is broken. No additional
	objects get that input [so write tight check() methods].
	By convention, the boolean return value of the object's
	parse() method dicates whether or not to call lastpage().
	This is merely a convenience provided because many objects
	do finish by calling lastpage().

The main upside of this setup is that adding or removing input
handling is a snap. Just create a new parser object and add it to
the appropriate chain or comment out/remove the one(s) you don't want.
The downside is tracing the difference between my code and the 
release version involves going through a lot of files. I've done
my best to go through release pos2.php and add parser objects for
any additional input, but I may have missed some things. Testing
should keep an eye out for input unknown screens. Notes on this
process follow:

"TNPR": calls a trackPatronage() function that doesn't seem
	to exist. If the function is found, this should be added
	to the first parse chain.
"CC" & "TB": credit cards do NOT require an amount at WFC
	(coincidentally, neither do checks, although this doesn't
	come up in the release's pos2.php)
"EC": does not require an amount at WFC
"ES": not sure what this is supposed to do. If it behaves oddly,
	recommend changing return value in parser-class-lib/EndOfShift.php
	parse() function to True.
"TW": Tare w/ no amount adds a tare of .01 at WFC

====================================================
= NEW FILES I'VE ADDED:
= WHAT IS THIS AND WHY IS IT HERE?
====================================================
gui-base.php
	THE centerpiece of the display code. It contains
	the frameset that used to be in pos.php, login.php,
	display.php, etc. It provides functions for changing
	the one page in the frameset (via http header or
	javascript) and a function to change both the
	input and main frames. All switching goes through
	this script (instead of main_display(x), goHome(),
	etc).

adminauthenticate.php & /gui-modules/adminlogin.php
	This is meant to be a multi-purpose login, rather
	than have separate login code for everything that
	comes up (no sale, cancel, etc). adminauthenticate.php
	will check to see if the user with the provided
	password has frontendsecurity >= 30 (this could be 
	changed to a $_SESSION variable for even more
	extensibility), and if so loads whichever gui-module
	is specified by $_SESSION["adminRequest"]
	I use this to load my undo function (see: 
	parser-class-lib/Steering case "UNDO")

undoTransaction.php & /gui-modules/undo.php
	New feature to rollback an entire transaction. The
	gui-module prompts for a transaction number (trans_num style)
	and undoTransaction.php loads the reverse of that
	transaction into localTempTrans. After confirming that
	a) it's the right transaction and b) nothing went horribly
	awry in reversing it, the reversal can be completed with
	a "0ca" (or zero any tender, really).

prodInfo.php & /gui-modules/productDump.php
	The idea here is to provide the cashier with a faster tool
	to deal with items not ringing correctly. Rather than
	filling out paperwork, the cashier can enter "PROD", then
	re-scan the item. This prints out a receipt indicating
	whether the UPC is in the system, what it's current
	price is, and whether it's on sale.
